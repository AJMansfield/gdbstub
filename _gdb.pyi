from typing import Any, ClassVar, List, Tuple, Generic, TypeVar

_T = TypeVar('T')
class _getset_descriptor(Generic[_T]):
    def __get__(self, instance, owner=None) -> _T: ...
    def __set__(self, instance, value: _T) -> None: ...

_buffer = bytes | bytearray | memoryview

ARCH_FRAME: int
BP_ACCESS_WATCHPOINT: int
BP_BREAKPOINT: int
BP_CATCHPOINT: int
BP_HARDWARE_BREAKPOINT: int
BP_HARDWARE_WATCHPOINT: int
BP_NONE: int
BP_READ_WATCHPOINT: int
BP_WATCHPOINT: int
COMMAND_BREAKPOINTS: int
COMMAND_DATA: int
COMMAND_FILES: int
COMMAND_MAINTENANCE: int
COMMAND_NONE: int
COMMAND_OBSCURE: int
COMMAND_RUNNING: int
COMMAND_STACK: int
COMMAND_STATUS: int
COMMAND_SUPPORT: int
COMMAND_TRACEPOINTS: int
COMMAND_TUI: int
COMMAND_USER: int
COMPLETE_COMMAND: int
COMPLETE_EXPRESSION: int
COMPLETE_FILENAME: int
COMPLETE_LOCATION: int
COMPLETE_NONE: int
COMPLETE_SYMBOL: int
DUMMY_FRAME: int
FRAME_UNWIND_INNER_ID: int
FRAME_UNWIND_MEMORY_ERROR: int
FRAME_UNWIND_NO_REASON: int
FRAME_UNWIND_NO_SAVED_PC: int
FRAME_UNWIND_NULL_ID: int
FRAME_UNWIND_OUTERMOST: int
FRAME_UNWIND_SAME_ID: int
FRAME_UNWIND_UNAVAILABLE: int
HOST_CONFIG: str
INLINE_FRAME: int
NORMAL_FRAME: int
PARAM_AUTO_BOOLEAN: int
PARAM_BOOLEAN: int
PARAM_ENUM: int
PARAM_FILENAME: int
PARAM_INTEGER: int
PARAM_OPTIONAL_FILENAME: int
PARAM_STRING: int
PARAM_STRING_NOESCAPE: int
PARAM_UINTEGER: int
PARAM_ZINTEGER: int
PARAM_ZUINTEGER: int
PARAM_ZUINTEGER_UNLIMITED: int
SEARCH_COMMON_BLOCK_DOMAIN: int
SEARCH_FUNCTION_DOMAIN: int
SEARCH_LABEL_DOMAIN: int
SEARCH_MODULE_DOMAIN: int
SEARCH_STRUCT_DOMAIN: int
SEARCH_TYPE_DOMAIN: int
SEARCH_UNDEF_DOMAIN: int
SEARCH_VAR_DOMAIN: int
SENTINEL_FRAME: int
SIGTRAMP_FRAME: int
STDERR: int
STDLOG: int
STDOUT: int
SYMBOL_COMMON_BLOCK_DOMAIN: int
SYMBOL_FUNCTION_DOMAIN: int
SYMBOL_LABEL_DOMAIN: int
SYMBOL_LOC_ARG: int
SYMBOL_LOC_BLOCK: int
SYMBOL_LOC_COMMON_BLOCK: int
SYMBOL_LOC_COMPUTED: int
SYMBOL_LOC_CONST: int
SYMBOL_LOC_CONST_BYTES: int
SYMBOL_LOC_LABEL: int
SYMBOL_LOC_LOCAL: int
SYMBOL_LOC_OPTIMIZED_OUT: int
SYMBOL_LOC_REF_ARG: int
SYMBOL_LOC_REGISTER: int
SYMBOL_LOC_REGPARM_ADDR: int
SYMBOL_LOC_STATIC: int
SYMBOL_LOC_TYPEDEF: int
SYMBOL_LOC_UNDEF: int
SYMBOL_LOC_UNRESOLVED: int
SYMBOL_MODULE_DOMAIN: int
SYMBOL_STRUCT_DOMAIN: int
SYMBOL_TYPE_DOMAIN: int
SYMBOL_UNDEF_DOMAIN: int
SYMBOL_VAR_DOMAIN: int
TAILCALL_FRAME: int
TARGET_CONFIG: str
TYPE_CODE_ARRAY: int
TYPE_CODE_BITSTRING: int
TYPE_CODE_BOOL: int
TYPE_CODE_CHAR: int
TYPE_CODE_COMPLEX: int
TYPE_CODE_DECFLOAT: int
TYPE_CODE_ENUM: int
TYPE_CODE_ERROR: int
TYPE_CODE_FIXED_POINT: int
TYPE_CODE_FLAGS: int
TYPE_CODE_FLT: int
TYPE_CODE_FUNC: int
TYPE_CODE_INT: int
TYPE_CODE_INTERNAL_FUNCTION: int
TYPE_CODE_MEMBERPTR: int
TYPE_CODE_METHOD: int
TYPE_CODE_METHODPTR: int
TYPE_CODE_MODULE: int
TYPE_CODE_NAMELIST: int
TYPE_CODE_NAMESPACE: int
TYPE_CODE_PTR: int
TYPE_CODE_RANGE: int
TYPE_CODE_REF: int
TYPE_CODE_RVALUE_REF: int
TYPE_CODE_SET: int
TYPE_CODE_STRING: int
TYPE_CODE_STRUCT: int
TYPE_CODE_TYPEDEF: int
TYPE_CODE_UNION: int
TYPE_CODE_VOID: int
TYPE_CODE_XMETHOD: int
VERSION: str
WP_ACCESS: int
WP_READ: int
WP_WRITE: int

class Architecture:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def disassemble(self, *args, **kwargs) -> Any: ...
    def integer_type(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def register_groups(self, *args, **kwargs) -> Any: ...
    def registers(self, *args, **kwargs) -> Any: ...

class Block:
    end: ClassVar[_getset_descriptor] = ...
    function: ClassVar[_getset_descriptor] = ...
    global_block: ClassVar[_getset_descriptor] = ...
    is_global: ClassVar[_getset_descriptor] = ...
    is_static: ClassVar[_getset_descriptor] = ...
    start: ClassVar[_getset_descriptor] = ...
    static_block: ClassVar[_getset_descriptor] = ...
    superblock: ClassVar[_getset_descriptor] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def is_valid(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iter__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class BlockIterator:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def is_valid(self, *args, **kwargs) -> Any: ...
    def __iter__(self) -> Any: ...
    def __next__(self) -> Any: ...

class Breakpoint:
    commands: ClassVar[_getset_descriptor] = ...
    condition: ClassVar[_getset_descriptor] = ...
    enabled: ClassVar[_getset_descriptor] = ...
    expression: ClassVar[_getset_descriptor] = ...
    hit_count: ClassVar[_getset_descriptor] = ...
    ignore_count: ClassVar[_getset_descriptor] = ...
    inferior: ClassVar[_getset_descriptor] = ...
    location: ClassVar[_getset_descriptor] = ...
    locations: ClassVar[_getset_descriptor] = ...
    number: ClassVar[_getset_descriptor] = ...
    pending: ClassVar[_getset_descriptor] = ...
    silent: ClassVar[_getset_descriptor] = ...
    task: ClassVar[_getset_descriptor] = ...
    temporary: ClassVar[_getset_descriptor] = ...
    thread: ClassVar[_getset_descriptor] = ...
    type: ClassVar[_getset_descriptor] = ...
    visible: ClassVar[_getset_descriptor] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def delete(self, *args, **kwargs) -> Any: ...
    def is_valid(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class BreakpointEvent(StopEvent): ...

class BreakpointLocation:
    address: ClassVar[_getset_descriptor] = ...
    enabled: ClassVar[_getset_descriptor] = ...
    fullname: ClassVar[_getset_descriptor] = ...
    function: ClassVar[_getset_descriptor] = ...
    owner: ClassVar[_getset_descriptor] = ...
    source: ClassVar[_getset_descriptor] = ...
    thread_groups: ClassVar[_getset_descriptor] = ...

class BtraceObjectList:
    __hash__: ClassVar[None] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def count(self, *args, **kwargs) -> Any: ...
    def index(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ClearObjFilesEvent(Event): ...

class Command:
    def __init__(self, *args, **kwargs) -> None: ...
    def dont_repeat(self, *args, **kwargs) -> Any: ...

class ConnectionEvent(Event): ...

class ContinueEvent(ThreadEvent): ...

class Event: ...

class EventRegistry:
    def connect(self, *args, **kwargs) -> Any: ...
    def disconnect(self, *args, **kwargs) -> Any: ...

class ExecutableChangedEvent(Event): ...

class ExitedEvent(Event): ...

class Field: ...

class FinishBreakpoint(Breakpoint):
    return_value: ClassVar[_getset_descriptor] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class Frame:
    __hash__: ClassVar[None] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def architecture(self, *args, **kwargs) -> Any: ...
    def block(self, *args, **kwargs) -> Any: ...
    def find_sal(self, *args, **kwargs) -> Any: ...
    def function(self, *args, **kwargs) -> Any: ...
    def is_valid(self, *args, **kwargs) -> Any: ...
    def language(self, *args, **kwargs) -> Any: ...
    def level(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def newer(self, *args, **kwargs) -> Any: ...
    def older(self, *args, **kwargs) -> Any: ...
    def pc(self, *args, **kwargs) -> Any: ...
    def read_register(self, register_name) -> Value: ...
    def read_var(self, *args, **kwargs) -> Any: ...
    def select(self, *args, **kwargs) -> Any: ...
    def static_link(self, *args, **kwargs) -> Any: ...
    def type(self, *args, **kwargs) -> Any: ...
    def unwind_stop_reason(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class FreeObjFileEvent(Event): ...

class FreeProgspaceEvent(Event): ...

class Function:
    def __init__(self, *args, **kwargs) -> None: ...

class GdbError(Exception): ...

class GdbExitingEvent(Event): ...

class Inferior:
    arguments: ClassVar[_getset_descriptor] = ...
    connection: ClassVar[_getset_descriptor] = ...
    connection_num: ClassVar[_getset_descriptor] = ...
    main_name: ClassVar[_getset_descriptor] = ...
    num: ClassVar[_getset_descriptor] = ...
    pid: ClassVar[_getset_descriptor] = ...
    progspace: ClassVar[_getset_descriptor] = ...
    was_attached: ClassVar[_getset_descriptor] = ...
    def architecture(self) -> Architecture: ...
    def clear_env(self) -> None: ...
    def is_valid(self, *args, **kwargs) -> Any: ...
    def read_memory(self, address, length) -> _buffer: ...
    def search_memory(self, address, length, pattern) -> int: ...
    def set_env(self, name, value) -> None: ...
    def thread_from_handle(self, *args, **kwargs) -> Any: ...
    def thread_from_thread_handle(self, *args, **kwargs) -> Any: ...
    def threads(self, *args, **kwargs) -> Any: ...
    def unset_env(self, name) -> None: ...
    def write_memory(self, *args, **kwargs) -> Any: ...

class InferiorCallPostEvent(Event): ...

class InferiorCallPreEvent(Event): ...

class InferiorDeletedEvent(Event): ...

class InferiorThread:
    details: ClassVar[_getset_descriptor] = ...
    global_num: ClassVar[_getset_descriptor] = ...
    inferior: ClassVar[_getset_descriptor] = ...
    name: ClassVar[_getset_descriptor] = ...
    num: ClassVar[_getset_descriptor] = ...
    ptid: ClassVar[_getset_descriptor] = ...
    ptid_string: ClassVar[_getset_descriptor] = ...
    def handle(self) -> handle: ...
    def is_exited(self) -> bool: ...
    def is_running(self) -> bool: ...
    def is_stopped(self) -> bool: ...
    def is_valid(self, *args, **kwargs) -> Any: ...
    def switch(self) -> Any: ...

class Instruction:
    data: ClassVar[_getset_descriptor] = ...
    decoded: ClassVar[_getset_descriptor] = ...
    pc: ClassVar[_getset_descriptor] = ...
    size: ClassVar[_getset_descriptor] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class LazyString:
    address: ClassVar[_getset_descriptor] = ...
    encoding: ClassVar[_getset_descriptor] = ...
    length: ClassVar[_getset_descriptor] = ...
    type: ClassVar[_getset_descriptor] = ...
    def value(self, *args, **kwargs) -> Any: ...

class LineTable:
    def has_line(self, lineno) -> bool: ...
    def is_valid(self, *args, **kwargs) -> Any: ...
    def line(self, lineno) -> Tuple: ...
    def source_lines(self) -> List: ...
    def __iter__(self) -> Any: ...

class LineTableEntry:
    line: ClassVar[_getset_descriptor] = ...
    pc: ClassVar[_getset_descriptor] = ...

class LineTableIterator:
    def is_valid(self, *args, **kwargs) -> Any: ...
    def __iter__(self) -> Any: ...
    def __next__(self) -> Any: ...

class MICommand:
    installed: ClassVar[_getset_descriptor] = ...
    name: ClassVar[_getset_descriptor] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class Membuf:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class MemoryChangedEvent(Event): ...

class MemoryError(error): ...

class NewInferiorEvent(Event): ...

class NewObjFileEvent(Event): ...

class NewProgspaceEvent(Event): ...

class NewThreadEvent(ThreadEvent): ...

class Objfile:
    build_id: ClassVar[_getset_descriptor] = ...
    filename: ClassVar[_getset_descriptor] = ...
    frame_filters: ClassVar[_getset_descriptor] = ...
    frame_unwinders: ClassVar[_getset_descriptor] = ...
    is_file: ClassVar[_getset_descriptor] = ...
    owner: ClassVar[_getset_descriptor] = ...
    pretty_printers: ClassVar[_getset_descriptor] = ...
    progspace: ClassVar[_getset_descriptor] = ...
    type_printers: ClassVar[_getset_descriptor] = ...
    username: ClassVar[_getset_descriptor] = ...
    xmethods: ClassVar[_getset_descriptor] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def add_separate_debug_file(self, file_name) -> Any: ...
    def is_valid(self, *args, **kwargs) -> Any: ...
    def lookup_global_symbol(self, *args, **kwargs) -> Any: ...
    def lookup_static_symbol(self, *args, **kwargs) -> Any: ...

class Parameter:
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class PendingFrame:
    def architecture(self) -> Architecture: ...
    def block(self, *args, **kwargs) -> Any: ...
    def create_unwind_info(self, FRAME_ID) -> UnwindInfo: ...
    def find_sal(self, *args, **kwargs) -> Any: ...
    def function(self, *args, **kwargs) -> Any: ...
    def is_valid(self, *args, **kwargs) -> Any: ...
    def language(self, *args, **kwargs) -> Any: ...
    def level(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def pc(self, *args, **kwargs) -> Any: ...
    def read_register(self, REG) -> Value: ...

class Progspace:
    executable_filename: ClassVar[_getset_descriptor] = ...
    filename: ClassVar[_getset_descriptor] = ...
    frame_filters: ClassVar[_getset_descriptor] = ...
    frame_unwinders: ClassVar[_getset_descriptor] = ...
    missing_file_handlers: ClassVar[_getset_descriptor] = ...
    pretty_printers: ClassVar[_getset_descriptor] = ...
    symbol_file: ClassVar[_getset_descriptor] = ...
    type_printers: ClassVar[_getset_descriptor] = ...
    xmethods: ClassVar[_getset_descriptor] = ...
    def block_for_pc(self, *args, **kwargs) -> Any: ...
    def find_pc_line(self, *args, **kwargs) -> Any: ...
    def is_valid(self, *args, **kwargs) -> Any: ...
    def objfile_for_address(self, int) -> Objfile: ...
    def objfiles(self, *args, **kwargs) -> Any: ...
    def solib_name(self, *args, **kwargs) -> Any: ...

class Record:
    begin: ClassVar[_getset_descriptor] = ...
    end: ClassVar[_getset_descriptor] = ...
    format: ClassVar[_getset_descriptor] = ...
    function_call_history: ClassVar[_getset_descriptor] = ...
    instruction_history: ClassVar[_getset_descriptor] = ...
    method: ClassVar[_getset_descriptor] = ...
    replay_position: ClassVar[_getset_descriptor] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def goto(self, *args, **kwargs) -> Any: ...

class RecordAuxiliary:
    data: ClassVar[_getset_descriptor] = ...
    number: ClassVar[_getset_descriptor] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class RecordFunctionSegment:
    instructions: ClassVar[_getset_descriptor] = ...
    level: ClassVar[_getset_descriptor] = ...
    next: ClassVar[_getset_descriptor] = ...
    number: ClassVar[_getset_descriptor] = ...
    prev: ClassVar[_getset_descriptor] = ...
    symbol: ClassVar[_getset_descriptor] = ...
    up: ClassVar[_getset_descriptor] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class RecordGap:
    number: ClassVar[_getset_descriptor] = ...
    reason_code: ClassVar[_getset_descriptor] = ...
    reason_string: ClassVar[_getset_descriptor] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class RecordInstruction(Instruction):
    data: ClassVar[_getset_descriptor] = ...
    decoded: ClassVar[_getset_descriptor] = ...
    is_speculative: ClassVar[_getset_descriptor] = ...
    number: ClassVar[_getset_descriptor] = ...
    pc: ClassVar[_getset_descriptor] = ...
    sal: ClassVar[_getset_descriptor] = ...
    size: ClassVar[_getset_descriptor] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class RegisterChangedEvent(Event): ...

class RegisterDescriptor:
    name: ClassVar[_getset_descriptor] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class RegisterDescriptorIterator:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def find(self, *args, **kwargs) -> Any: ...
    def __iter__(self) -> Any: ...
    def __next__(self) -> Any: ...

class RegisterGroup:
    name: ClassVar[_getset_descriptor] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class RegisterGroupsIterator:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __iter__(self) -> Any: ...
    def __next__(self) -> Any: ...

class RemoteTargetConnection(TargetConnection):
    def send_packet(self, PACKET) -> bytes: ...

class SignalEvent(StopEvent): ...

class StopEvent(ThreadEvent): ...

class Symbol:
    addr_class: ClassVar[_getset_descriptor] = ...
    is_argument: ClassVar[_getset_descriptor] = ...
    is_artificial: ClassVar[_getset_descriptor] = ...
    is_constant: ClassVar[_getset_descriptor] = ...
    is_function: ClassVar[_getset_descriptor] = ...
    is_variable: ClassVar[_getset_descriptor] = ...
    line: ClassVar[_getset_descriptor] = ...
    linkage_name: ClassVar[_getset_descriptor] = ...
    name: ClassVar[_getset_descriptor] = ...
    needs_frame: ClassVar[_getset_descriptor] = ...
    print_name: ClassVar[_getset_descriptor] = ...
    symtab: ClassVar[_getset_descriptor] = ...
    type: ClassVar[_getset_descriptor] = ...
    def is_valid(self, *args, **kwargs) -> Any: ...
    def value(self, *args, **kwargs) -> Any: ...

class Symtab:
    filename: ClassVar[_getset_descriptor] = ...
    objfile: ClassVar[_getset_descriptor] = ...
    producer: ClassVar[_getset_descriptor] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def fullname(self, *args, **kwargs) -> Any: ...
    def global_block(self, *args, **kwargs) -> Any: ...
    def is_valid(self, *args, **kwargs) -> Any: ...
    def linetable(self, *args, **kwargs) -> Any: ...
    def static_block(self, *args, **kwargs) -> Any: ...

class Symtab_and_line:
    last: ClassVar[_getset_descriptor] = ...
    line: ClassVar[_getset_descriptor] = ...
    pc: ClassVar[_getset_descriptor] = ...
    symtab: ClassVar[_getset_descriptor] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def is_valid(self, *args, **kwargs) -> Any: ...

class TargetConnection:
    description: ClassVar[_getset_descriptor] = ...
    details: ClassVar[_getset_descriptor] = ...
    num: ClassVar[_getset_descriptor] = ...
    type: ClassVar[_getset_descriptor] = ...
    def is_valid(self, *args, **kwargs) -> Any: ...

class ThreadEvent(Event): ...

class ThreadExitedEvent(Event): ...

class TuiEnabledEvent(Event): ...

class TuiWindow:
    height: ClassVar[_getset_descriptor] = ...
    title: ClassVar[_getset_descriptor] = ...
    width: ClassVar[_getset_descriptor] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def erase(self, *args, **kwargs) -> Any: ...
    def is_valid(self) -> bool: ...
    def write(self, *args, **kwargs) -> Any: ...

class Type:
    alignof: ClassVar[_getset_descriptor] = ...
    code: ClassVar[_getset_descriptor] = ...
    dynamic: ClassVar[_getset_descriptor] = ...
    is_array_like: ClassVar[_getset_descriptor] = ...
    is_scalar: ClassVar[_getset_descriptor] = ...
    is_signed: ClassVar[_getset_descriptor] = ...
    is_string_like: ClassVar[_getset_descriptor] = ...
    name: ClassVar[_getset_descriptor] = ...
    objfile: ClassVar[_getset_descriptor] = ...
    sizeof: ClassVar[_getset_descriptor] = ...
    tag: ClassVar[_getset_descriptor] = ...
    __hash__: ClassVar[None] = ...
    def array(self, *args, **kwargs) -> Any: ...
    def const(self) -> Type: ...
    def fields(self) -> list: ...
    def get(self, *args, **kwargs) -> Any: ...
    def has_key(self, *args, **kwargs) -> Any: ...
    def items(self) -> list: ...
    def iteritems(self, *args, **kwargs) -> Any: ...
    def iterkeys(self, *args, **kwargs) -> Any: ...
    def itervalues(self, *args, **kwargs) -> Any: ...
    def keys(self) -> list: ...
    def optimized_out(self) -> Value: ...
    def pointer(self) -> Type: ...
    def range(self) -> tuple: ...
    def reference(self) -> Type: ...
    def strip_typedefs(self) -> Type: ...
    def target(self) -> Type: ...
    def template_argument(self, *args, **kwargs) -> Any: ...
    def unqualified(self) -> Type: ...
    def values(self) -> list: ...
    def vector(self, *args, **kwargs) -> Any: ...
    def volatile(self) -> Type: ...
    def __bool__(self) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __iter__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class TypeIterator:
    def __iter__(self) -> Any: ...
    def __next__(self) -> Any: ...

class UnwindInfo:
    def add_saved_register(self, REG, VALUE) -> None: ...

class Value:
    address: ClassVar[_getset_descriptor] = ...
    bytes: ClassVar[_getset_descriptor] = ...
    dynamic_type: ClassVar[_getset_descriptor] = ...
    is_lazy: ClassVar[_getset_descriptor] = ...
    is_optimized_out: ClassVar[_getset_descriptor] = ...
    type: ClassVar[_getset_descriptor] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, VAL) -> None: ...
    def cast(self, *args, **kwargs) -> Any: ...
    def const_value(self, *args, **kwargs) -> Any: ...
    def dereference(self, *args, **kwargs) -> Any: ...
    def dynamic_cast(self, *args, **kwargs) -> Any: ...
    def fetch_lazy(self, *args, **kwargs) -> Any: ...
    def format_string(self, *args, **kwargs) -> Any: ...
    def lazy_string(self, *args, **kwargs) -> Any: ...
    def reference_value(self, *args, **kwargs) -> Any: ...
    def referenced_value(self, *args, **kwargs) -> Any: ...
    def reinterpret_cast(self, *args, **kwargs) -> Any: ...
    def rvalue_reference_value(self, *args, **kwargs) -> Any: ...
    def string(self, *args, **kwargs) -> Any: ...
    def to_array(self) -> Value: ...
    def __abs__(self) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __and__(self, other) -> Any: ...
    def __bool__(self) -> Any: ...
    def __call__(self, *args, **kwargs) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __float__(self) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> Any: ...
    def __invert__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lshift__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mod__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    def __or__(self, other) -> Any: ...
    def __pos__(self) -> Any: ...
    def __pow__(self, other) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __rand__(self, other) -> Any: ...
    def __rlshift__(self, other) -> Any: ...
    def __rmod__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __ror__(self, other) -> Any: ...
    def __rpow__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __rxor__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...
    def __sub__(self, other) -> Any: ...
    def __truediv__(self, other) -> Any: ...
    def __xor__(self, other) -> Any: ...

class ValuePrinter:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class error(RuntimeError): ...

def add_history(*args, **kwargs) -> Any: ...
def architecture_names(*args, **kwargs) -> Any: ...
def breakpoints(*args, **kwargs) -> Any: ...
def connections(*args, **kwargs) -> Any: ...
def convenience_variable(*args, **kwargs) -> Any: ...
def current_language() -> str: ...
def current_objfile(*args, **kwargs) -> Any: ...
def current_recording(*args, **kwargs) -> Any: ...
def decode_line(String) -> Tuple: ...
def default_visualizer(*args, **kwargs) -> Any: ...
def execute(*args, **kwargs) -> Any: ...
def execute_mi(*args, **kwargs) -> Any: ...
def flush(*args, **kwargs) -> Any: ...
def format_address(*args, **kwargs) -> Any: ...
def frame_stop_reason_string(*args, **kwargs) -> Any: ...
def history(*args, **kwargs) -> Any: ...
def history_count(*args, **kwargs) -> Any: ...
def host_charset(*args, **kwargs) -> Any: ...
def inferiors(*args, **kwargs) -> Any: ...
def interrupt(*args, **kwargs) -> Any: ...
def invalidate_cached_frames(*args, **kwargs) -> Any: ...
def lookup_global_symbol(*args, **kwargs) -> Any: ...
def lookup_objfile(*args, **kwargs) -> Any: ...
def lookup_static_symbol(*args, **kwargs) -> Any: ...
def lookup_static_symbols(*args, **kwargs) -> Any: ...
def lookup_symbol(*args, **kwargs) -> Any: ...
def lookup_type(*args, **kwargs) -> Any: ...
def newest_frame(*args, **kwargs) -> Any: ...
def notify_mi(name, data) -> None: ...
def parameter(*args, **kwargs) -> Any: ...
def parse_and_eval(*args, **kwargs) -> Any: ...
def post_event(*args, **kwargs) -> Any: ...
def print_options() -> dict: ...
def progspaces(*args, **kwargs) -> Any: ...
def rbreak(*args, **kwargs) -> Any: ...
def register_window_type(NAME, CONSTRUCTOR) -> None: ...
def selected_frame(*args, **kwargs) -> Any: ...
def selected_inferior(*args, **kwargs) -> Any: ...
def selected_thread(*args, **kwargs) -> Any: ...
def set_convenience_variable(*args, **kwargs) -> Any: ...
def start_recording(*args, **kwargs) -> Any: ...
def stop_recording(*args, **kwargs) -> Any: ...
def string_to_argv(*args, **kwargs) -> Any: ...
def target_charset(*args, **kwargs) -> Any: ...
def target_wide_charset(*args, **kwargs) -> Any: ...
def write(*args, **kwargs) -> Any: ...
